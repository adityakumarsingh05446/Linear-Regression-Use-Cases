# -*- coding: utf-8 -*-
"""USA Housing predictions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XZgVhga-aarRvSEk1kyrOZUTnvRNoI2O

**Importing Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""**Check outh the data**"""

USAhousing = pd.read_csv("/content/USA_Housing.csv")

USAhousing.count() # To check how many different values we have inside each attribute

USAhousing.head(10) # Will return top 5 rows of data

USAhousing.info() # to find non null values and data types

USAhousing.describe()

USAhousing.columns

"""**EDA : Exploratory Data Analysis**

Lets create some plot to analyze data
"""

sns.pairplot(USAhousing)

sns.displot(USAhousing['Price']) # for dependent attribute

sns.heatmap(USAhousing.corr()) # Correlation ranges from -1(negative correlation) to +1(positive correlation)



"""**Training a Linear Regression Model**

**Differentiating between independent and dependent variables [X and Y]**
"""

X = USAhousing[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
       'Avg. Area Number of Bedrooms', 'Area Population']] # remember to pass it as list of list

y = USAhousing['Price']

"""**Train and Test split of data**


"""

from sklearn.model_selection import train_test_split

X_train , X_test , y_train , y_test = train_test_split(X , y , test_size = 0.4 , random_state = 101)

print(X_train.shape)
print(X_test.shape)

"""**Creating and Training the Model**"""

from sklearn.linear_model import LinearRegression

lm = LinearRegression()

lm.fit(X_train , y_train) # Training Linear Regression model on training data

"""**Model Evaluation**

Lets evaluate model by checking out its coefficients
"""

# print the intercept
 print(lm.intercept_)

coeff_df = pd.DataFrame(lm.coef_ , X.columns , columns=['Coefficients'])
coeff_df

# Holding all the other features fixed , 1 unit increase in Avg. Area Income results in an increase of $21.528276
# Holding all the other features fixed , 1 unit increase in Avg. Area House Age results in an increase of $164883.282027
# Holding all the other features fixed , 1 unit increase in Avg. Area Number of Rooms results in an increase of $122368.678027
# Holding all the other features fixed , 1 unit increase in Avg. Area Number of Bedrooms results in an increase of $2233.801864
# Holding all the other features fixed , 1 unit increase in Area Population results in an increase of $15.150420

"""**Predictions from our Model**"""

predictions = lm.predict(X_test)

plt.scatter(y_test,predictions)

sns.displot(y_test - predictions) # to check error term which is normalizing at zero : Hence its a good model

"""**Evaluation Metrics**"""

from sklearn import metrics

print('MAE : ', metrics.mean_absolute_error(y_test , predictions))
print('MAE : ', metrics.mean_squared_error(y_test , predictions))
print('MAE : ', np.sqrt(metrics.mean_squared_error(y_test , predictions)))

